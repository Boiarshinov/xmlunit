<?xml version="1.0"?>
<!--
  This file is licensed to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project name="xmlunit" default="test" basedir=".">

  <!-- allow properties to be overridden in a properties file -->
  <property file="build.properties"/>

  <!-- Version -->
  <property name="xmlunit.version" value="2.0alpha"/>

  <!-- some locations -->
  <property name="src.dir" value="src/main"/>
  <property name="legacy.src.dir" value="java-legacy/src/main"/>
  <property name="test.dir" value="src/tests"/>
  <property name="legacy.test.dir" value="java-legacy/src/tests"/>
  <property name="build.dir" location="build/java"/>
  <property name="gen.src.dir" value="${build.dir}/generated"/>
  <property name="lib.dir" value="${build.dir}/lib"/>
  <property name="core.out.dir" value="${build.dir}/core-classes"/>
  <property name="legacy.out.dir" value="${build.dir}/legacy-classes"/>
  <property name="hamcrest.out.dir" value="${build.dir}/hamcrest-classes"/>
  <property name="coretest.out.dir" value="${build.dir}/core-test-classes"/>
  <property name="legacytest.out.dir" value="${build.dir}/legacy-test-classes"/>
  <property name="hamcresttest.out.dir" value="${build.dir}/hamcrest-test-classes"/>
  <property name="test.report.dir" value="${build.dir}/test-report"/>
  <property name="dist.dir" value="${build.dir}/dist"/>
  <property name="docs.dir" value="${build.dir}/doc"/>

  <!-- javac properties -->
  <property name="javac.source" value="6"/>
  <property name="javac.target" value="6"/>
  <property name="javac.debug" value="true"/>

  <!-- junit task properties -->
  <property name="junit.fork" value="yes"/>

  <target name="-props">
    <available property="regexp.present" classname="java.util.regex.Matcher"/>
  </target>

  <target name="-init" depends="-props">
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${core.out.dir}"/>
    <mkdir dir="${legacy.out.dir}"/>
    <mkdir dir="${hamcrest.out.dir}"/>
    <mkdir dir="${coretest.out.dir}"/>
    <mkdir dir="${legacytest.out.dir}"/>
    <mkdir dir="${hamcresttest.out.dir}"/>
    <mkdir dir="${test.report.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${docs.dir}"/>
    <mkdir dir="${gen.src.dir}"/>
  </target>

  <target name="clean"
    description="removes created directories">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${lib.dir}"/>
      <fileset dir="${core.out.dir}"/>
      <fileset dir="${legacy.out.dir}"/>
      <fileset dir="${hamcrest.out.dir}"/>
      <fileset dir="${coretest.out.dir}"/>
      <fileset dir="${legacytest.out.dir}"/>
      <fileset dir="${hamcresttest.out.dir}"/>
      <fileset dir="${test.report.dir}"/>
      <fileset dir="${dist.dir}"/>
      <fileset dir="${docs.dir}"/>
      <fileset dir="${build.dir}"/>
    </delete> 
  </target>

  <target name="compile-core" depends="-init"
          description="compiles core sources">
    <javac srcdir="${src.dir}/java-core:${gen.src.dir}"
           destdir="${core.out.dir}"
           includeantruntime="false"
           debug="${javac.debug}" target="${javac.target}"
           source="${javac.source}">
    </javac>
  </target>

  <target name="compile-legacy" depends="compile-core"
    description="compiles legacy sources">
    <javac srcdir="${legacy.src.dir}" destdir="${legacy.out.dir}"
           includeantruntime="false" debug="${javac.debug}"
           target="${javac.target}" source="${javac.source}">
      <classpath>
        <pathelement location="${core.out.dir}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="lib" includes="junit-3*.jar"/>
      </classpath>
      <exclude name="**/*XPathRegexAssert.java" unless="regexp.present"/>
    </javac>
  </target>

  <target name="compile-legacy-tests" depends="compile-legacy"
          description="Compiles the test for XMLUnit 1.x">
    <javac srcdir="${legacy.test.dir}" destdir="${legacytest.out.dir}"
           includeantruntime="false" debug="${javac.debug}"
           target="${javac.target}" source="${javac.source}">
      <classpath>
        <pathelement location="${core.out.dir}"/>
        <pathelement location="${legacy.out.dir}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="lib" includes="junit-3*.jar"/>
      </classpath>
      <exclude name="**/*XPathRegexAssert.java" unless="regexp.present"/>
    </javac>
  </target>

  <target name="compile-core-tests" depends="compile-core"
          description="Compiles the test for XMLUnit2">
    <javac srcdir="${test.dir}/java-core" destdir="${coretest.out.dir}"
           includeantruntime="false"
           debug="${javac.debug}" target="${javac.target}"
           source="${javac.source}">
      <classpath>
        <pathelement location="${core.out.dir}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="lib" includes="junit-4*.jar"/>
        <fileset dir="lib" includes="hamcrest-core-*.jar"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-hamcrest" depends="compile-core"
    description="compiles hamcrest matchers">
    <javac srcdir="${src.dir}/java-hamcrest" destdir="${hamcrest.out.dir}"
           includeantruntime="false" debug="${javac.debug}"
           target="${javac.target}" source="${javac.source}">
      <classpath>
        <pathelement location="${core.out.dir}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="lib" includes="hamcrest-core-*.jar"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-hamcrest-tests" depends="compile-hamcrest"
          description="Compiles the tests for hamcrest matchers">
    <javac srcdir="${test.dir}/java-hamcrest" destdir="${hamcresttest.out.dir}"
           includeantruntime="false" debug="${javac.debug}"
           target="${javac.target}" source="${javac.source}">
      <classpath>
        <pathelement location="${core.out.dir}"/>
        <pathelement location="${hamcrest.out.dir}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="lib" includes="junit-4*.jar"/>
        <fileset dir="lib" includes="hamcrest-core-*.jar"/>
      </classpath>
    </javac>
  </target>

  <target name="compile" depends="compile-core,compile-legacy,compile-hamcrest"/>
  <target name="compile-tests"
          depends="compile-core-tests,compile-legacy-tests,compile-hamcrest-tests"/>

  <target name="test" depends="compile-tests" description="runs the tests">
    <junit printsummary="yes" haltonfailure="no" fork="${junit.fork}"
      forkMode="perBatch" failureproperty="tests.failed">
      <sysproperty key="basedir" value="${basedir}"/>
      <sysproperty key="user.dir" value="${basedir}"/>
      <classpath>
        <pathelement location="${core.out.dir}"/>
        <pathelement location="${legacy.out.dir}"/>
        <pathelement location="${hamcrest.out.dir}"/>
        <pathelement location="${legacytest.out.dir}"/>
        <pathelement location="${coretest.out.dir}"/>
        <pathelement location="${hamcresttest.out.dir}"/>
        <pathelement path="${java.class.path}"/>
        <fileset dir="lib" includes="junit-4*.jar"/>
        <fileset dir="lib" includes="hamcrest-core-*.jar"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${test.report.dir}">
        <fileset dir="${legacy.test.dir}">
          <include name="**/test_*.java"/>
        </fileset>
        <fileset dir="${test.dir}/java-core">
          <include name="**/*Test.java"/>
          <exclude name="**/Abstract*.java"/>
        </fileset>
        <fileset dir="${test.dir}/java-hamcrest">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${test.report.dir}">
      <fileset dir="${test.report.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.report.dir}/html"/>
    </junitreport>

    <fail if="tests.failed">Some tests failed</fail>
  </target>

  <target name="docs"
    depends="javadocs"
    description="creates the documentation bundle"/>

  <target name="javadocs" depends="-init"
    description="creates the API documentation">
    <delete includeEmptyDirs="true" dir="${docs.dir}/api"/>
    <javadoc destdir="${docs.dir}/api"
             windowtitle="XMLUnit Documentation">
      <group title="XMLUnit Core v${xmlunit.version}"
             packages="org.xmlunit*"/>
      <group title="XMLUnit Matcher v${xmlunit.version}"
             packages="org.xmlunit.matcher*"/>
      <group title="XMLUnit Legacy v${xmlunit.version}"
             packages="org.custommonkey.xmlunit*"/>
      <fileset dir="${legacy.src.dir}">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="${src.dir}/java-core">
        <include name="**/*.java"/>
      </fileset>
      <fileset dir="${src.dir}/java-hamcrest">
        <include name="**/*.java"/>
      </fileset>
      <classpath>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <pathelement path="${java.class.path}"/>
      </classpath>
    </javadoc>
  </target>

  <target name="jar" depends="compile"
    description="creates jar, Maven2 POM and Ivy file">
    <jar jarfile="${lib.dir}/xmlunit-core-${xmlunit.version}.jar"
       basedir="${core.out.dir}"
    />
    <jar jarfile="${lib.dir}/xmlunit-legacy-${xmlunit.version}.jar"
       basedir="${legacy.out.dir}"
    />
    <jar jarfile="${lib.dir}/xmlunit-hamcrest-${xmlunit.version}.jar"
       basedir="${hamcrest.out.dir}"
    />
    <jar jarfile="${lib.dir}/xmlunit-sumo-${xmlunit.version}.jar">
      <fileset dir="${core.out.dir}"/>
      <fileset dir="${legacy.out.dir}"/>
      <fileset dir="${hamcrest.out.dir}"/>
    </jar>

    <tstamp> 	 
      <format property="ivy.publication.datetime" pattern="yyyyMMddHHmmss"/>
    </tstamp>

    <copy todir="${lib.dir}">
      <fileset dir="${src.dir}/etc">
        <include name="xmlunit.pom"/>
        <include name="xmlunit-ivy.xml"/>
      </fileset>
      <mapper type="glob" from="xmlunit*" to="xmlunit-${xmlunit.version}*"/>
      <filterset>
        <filter token="VERSION" value="${xmlunit.version}"/>
        <filter token="DATE" value="${ivy.publication.datetime}"/>
        <filter token="DESCRIPTION" value="XMLUnit compares a control XML document to a test document or the result of a transformation, validates documents, and compares the results of XPath expressions."/>
        <filter token="LICENSE" value="BSD License"/>
        <filter token="LICENSE_URL" value="http://xmlunit.svn.sourceforge.net/viewvc/*checkout*/xmlunit/trunk/xmlunit/LICENSE.txt"/>
        <filter token="GROUP" value="xmlunit"/>
        <filter token="ARTIFACT" value="xmlunit"/>
        <filter token="TYPE" value="jar"/>
      </filterset>
    </copy>
  </target>

  <target name="bindist" depends="jar,test,docs">
    <zip zipfile="${dist.dir}/xmlunit-${xmlunit.version}-bin.zip">
      <zipfileset prefix="xmlunit-${xmlunit.version}/lib"
        dir="${lib.dir}"/>
      <zipfileset prefix="xmlunit-${xmlunit.version}/docs"
        dir="${docs.dir}"/>
      <zipfileset prefix="xmlunit-${xmlunit.version}" dir=".">
        <include name="KEYS"/>
        <include name="LICENSE.txt"/>
        <include name="README.txt"/>
      </zipfileset>
    </zip>
  </target>

  <target name="srcdist" depends="-init">
    <zip zipfile="${dist.dir}/xmlunit-${xmlunit.version}-src.zip">
      <zipfileset prefix="xmlunit-${xmlunit.version}" dir=".">
        <include name="*.xml"/>
        <include name="${src.dir}/"/>
        <include name="${test.dir}/"/>
        <include name="KEYS"/>
        <include name="LICENSE"/>
        <include name="README.md"/>
      </zipfileset>
    </zip>
  </target>

  <target name="dist"
    depends="clean,bindist,srcdist"
    description="creates the distribution files">
    <jar jarfile="${lib.dir}/xmlunit-${xmlunit.version}-sources.jar"
       basedir="${src.dir}/java-core"
    />
    <jar jarfile="${lib.dir}/xmlunit-${xmlunit.version}-javadoc.jar"
       basedir="${docs.dir}/api"
    />
    <checksum algorithm="md5">
      <fileset dir="${dist.dir}">
        <include name="*.zip"/>
      </fileset>
    </checksum>
    <checksum algorithm="sha1">
      <fileset dir="${dist.dir}">
        <include name="*.zip"/>
      </fileset>
    </checksum>
    <checksum algorithm="md5">
      <fileset dir="${lib.dir}"/>
    </checksum>
    <checksum algorithm="sha1">
      <fileset dir="${lib.dir}">
        <exclude name="*.md5"/>
      </fileset>
    </checksum>
  </target>

</project>
